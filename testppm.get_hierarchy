CREATE OR REPLACE FUNCTION testppm.get_hierarchy(in_activityid INT DEFAULT NULL) 
    RETURNS TABLE (
        id INT,
        parented INT,
        lvl INT,
        wbs TEXT,
        code TEXT,
        name TEXT,
        dataid INT,
        type TEXT,
        datestart DATE,
        datefinish DATE
    ) AS $$
BEGIN
    RETURN QUERY WITH RECURSIVE hierarchical_list AS (
  SELECT activity.activityid AS id, 
         activity.parentid AS parentid, 
         1 AS lvl,
		'1.'|| CAST(ROW_NUMBER() OVER (ORDER BY activity.activityid,program.indexnum, subprogram.indexnum) AS TEXT) ||'.' AS wbs,       
         activity.code AS code,
         activity.name AS name,
         activity.activityid AS dataid,
         activitytype.name AS type, 
		CASE
    	WHEN MAX(point.plandate) IS NOT NULL THEN TO_DATE(TO_CHAR(MAX(point.plandate), 'DD.MM.YYYY'), 'DD.MM.YYYY')
    	WHEN MAX(point.factdate) IS NOT NULL THEN TO_DATE(TO_CHAR(MAX(point.factdate), 'DD.MM.YYYY'), 'DD.MM.YYYY')
	    ELSE NULL
		END AS datestart,
		CASE
    	WHEN MAX(point.factdate) IS NOT NULL THEN TO_DATE(TO_CHAR(MAX(point.factdate), 'DD.MM.YYYY'), 'DD.MM.YYYY')
    	WHEN MAX(point.plandate) IS NOT NULL THEN TO_DATE(TO_CHAR(MAX(point.plandate), 'DD.MM.YYYY'), 'DD.MM.YYYY')
		ELSE NULL
		END AS datefinish	  
  FROM testppm.activity
  LEFT JOIN testppm.program ON activity.activityid = program.programid
  LEFT JOIN testppm.subprogram ON activity.activityid = subprogram.subprogramid
  LEFT JOIN testppm.project ON activity.activityid = project.projectid
  LEFT JOIN testppm.contract ON activity.activityid = contract.contractid
  LEFT JOIN testppm.point ON activity.activityid = point.pointid
  LEFT JOIN testppm.activitytype ON activity.activitytypeid = activitytype.activitytypeid
  LEFT JOIN testppm.area ON area.areaid	= contract.areaid
  WHERE activity.parentid IS NULL
  GROUP BY activity.activityid,activitytype.name,point.plandate,point.factdate,program.indexnum,subprogram.indexnum		
	UNION ALL
  SELECT child.activityid, 
         child.parentid, 
         parent.lvl + 1, 
         parent.wbs || '1.' || ROW_NUMBER() OVER (PARTITION BY parent.wbs ORDER BY child.activityid), 
         child.code,
         child.name,
         child.parentid as dataid,
         childtype.name,
		CASE
    	WHEN childpoint.factdate IS NOT NULL THEN TO_DATE(TO_CHAR(childpoint.factdate, 'DD.MM.YYYY'), 'DD.MM.YYYY')
    	WHEN childpoint.plandate IS NOT NULL THEN TO_DATE(TO_CHAR(childpoint.plandate, 'DD.MM.YYYY'), 'DD.MM.YYYY')
		ELSE NULL
		END AS datefinish,
		CASE
    	WHEN childpoint.plandate IS NOT NULL THEN TO_DATE(TO_CHAR(childpoint.plandate, 'DD.MM.YYYY'), 'DD.MM.YYYY')
    	WHEN childpoint.factdate IS NOT NULL THEN TO_DATE(TO_CHAR(childpoint.factdate, 'DD.MM.YYYY'), 'DD.MM.YYYY')
		ELSE NULL
		END AS datestart
	
  FROM testppm.activity child
  JOIN hierarchical_list parent ON child.parentid = parent.id
  LEFT JOIN testppm.program ON child.activityid = program.programid
  LEFT JOIN testppm.subprogram ON child.activityid = subprogram.subprogramid
  LEFT JOIN testppm.project ON child.activityid = project.projectid
  LEFT JOIN testppm.contract ON child.activityid = contract.contractid
  LEFT JOIN testppm.point childpoint ON child.activityid = childpoint.pointid
  LEFT JOIN testppm.activitytype childtype ON child.activitytypeid = childtype.activitytypeid
  LEFT JOIN testppm.area childarea ON childarea.areaid	= contract.areaid	
  WHERE child.name <> 'WBS' AND (parent.lvl <= 3 )
  GROUP BY child.activityid, parent.lvl,parent.wbs,childtype.name,childpoint.factdate,childpoint.plandate	
	)
SELECT h.id, h.parentid, h.lvl, h.wbs, h.code, h.name, h.dataid, h.type,h.datestart,h.datefinish
FROM hierarchical_list h
LEFT JOIN testppm.activity ON activity.activityid = h.id
ORDER BY h.wbs;
END;
$$
LANGUAGE PLPGSQL
